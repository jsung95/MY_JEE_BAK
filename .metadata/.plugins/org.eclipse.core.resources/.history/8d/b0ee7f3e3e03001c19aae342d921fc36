package org.zerock.uuid;

import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.UUID;

import org.junit.Test;

import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j2;


@Log4j2
@NoArgsConstructor
public class GenerateUUIDTests {
	
	
	//================ UUID versions ================//
//	•1 Time-based UUID 
//	•2 DCE security UUID 
//	•3 Name-based UUID 
//	•4 Randomly generated UUID 
	//===============================================//
	
	
	@Test
	public void testUUIDVersion1() {
		log.debug("testUUIDVersion1() invoked.");
		
		UUID uuid = UUIDGenerator.generateType1UUID();
		
		log.info("\t+ uuid: " + uuid.toString());
		log.info("\t+ version: " + uuid.version());
	} // testUUIDVersion1
	
	
	@Test
	public void testUUIDVersion3() throws UnsupportedEncodingException {	// From namespace + name
		log.debug("testUUIDVersion3() invoked.");
		
		String namespace = "12345678901234567890123456789012";				// Must be 32 lengths.
		String name = "myapp";
		
		assert namespace.length() == 32;
		
		UUID uuid = UUIDGenerator.generateType3UUID(namespace, name);
		
		log.info("\t+ uuid: " + uuid.toString());
		log.info("\t+ version: " + uuid.version());
	} // testUUIDVersion3
	
	
	@Test
	public void testUUIDVersion4() {
		log.debug("testUUIDVersion4() invoked.");
		
		UUID uuid = UUIDGenerator.generateType4UUID();
		
		log.info("\t+ uuid: " + uuid.toString());
		log.info("\t+ version: " + uuid.version());
	} // testUUIDVersion4
	
	
	@Test
	public void testUUIDversion5() throws UnsupportedEncodingException {
		log.debug("testUUIDversion5() invoked.");
		
		String namespace = "12345678901234567890123456789012";				// Must be 32 lengths.
		String name = "myapp";
		String name2 = "myapp";
		
		assert namespace.length() == 32;
		
		UUID uuid = UUIDGenerator.generateType5UUID(namespace, name);
		UUID uuid2 = UUIDGenerator.generateType5UUID(namespace, name2);
		
		log.info("\t+ uuid: " + uuid.toString());
		log.info("\t+ uuid: " + uuid2.toString());
		log.info("\t+ version: " + uuid.version());
	} // testUUIDversion5
	
	
	@Test
	public void testUUIDAndMessageDigest() 
			throws NoSuchAlgorithmException, UnsupportedEncodingException {
		log.debug("testUUIDAndMessageDigest() invoked.");
		
		String uuid = UUIDGenerator.generateUniqueKeysWithUUIDAndMessageDigest();
		
		log.info("\t+ uuid: " + uuid);
	} // testUUIDAndMessageDigest

	
	
	@Test
	public void testXXX() throws NoSuchAlgorithmException, UnsupportedEncodingException {
		
		String str = "myapp";
		MessageDigest salt = MessageDigest.getInstance("SHA-256");
        
        salt.update(str.getBytes("UTF-8"));
        
        String digest = bytesToHex(salt.digest());
        log.info(digest);
	}
	
	private static final char[] hexArray = "0123456789ABCDEF".toCharArray();
	
    private static String bytesToHex(byte[] bytes) {
    	log.debug("bytesToHex(bytes) invoked.");
    	
        char[] hexChars = new char[bytes.length * 2];
        
        for (int j = 0; j < bytes.length; j++) {
            int v = bytes[j] & 0xFF;
            
            hexChars[j * 2] = hexArray[v >>> 4];
            hexChars[j * 2 + 1] = hexArray[v & 0x0F];
        } // for
        
        return new String(hexChars);
    } // bytesToHex
} // end class
